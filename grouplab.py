# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t84TFZltEmPIoC2sevba6qBVqkb2w1Db
"""

from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
import warnings

columns = ['Sequence Name','mcg','gvh','alm','mit','erl','pox','vac','nuc','The localization site']
data =  pd.read_fwf("yeast.data",sep = "/t", header = None, names = columns)
print(data)

X = data.iloc[:,1:9]
y = data.loc[:,"The localization site"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3.0, random_state=42)

acc_score = 0
max_random_state = 0
max_max_depth = 0
max_min_samples_leaf = 0
test_min_samples_leaf = 2

for test_random_state in range(42, 52, 1):
    for test_max_depth in range(1, 9, 1):
        tree = DecisionTreeClassifier(criterion="entropy", random_state=test_random_state, max_depth=test_max_depth, min_samples_leaf=test_min_samples_leaf + test_max_depth)
        tree.fit(X_train, y_train)
        y_pred_tree = tree.predict(X_test)
        acc = accuracy_score(y_test, y_pred_tree)*100  # tree
        acc = round(acc, 4)

        if (acc > acc_score):
            max_random_state = test_random_state
            max_max_depth = test_max_depth
            max_min_samples_leaf = test_min_samples_leaf
            acc_score = acc

        # print(test_random_state,test_max_depth, test_min_samples_leaf, acc)
# print("STOPPED.\n")
print("do chinh xac tong the cao nhat voi cac gia tri la:")
print("random state:", max_random_state, "\nmax depth:", max_max_depth, "\nmin samples leaf:", test_min_samples_leaf, "\ndo chinh xac cao nhat la:", acc_score)

sum_knn = 0
sum_bayes = 0
sum_tree = 0

for b in range(0, 10):
    print("LAN LAP", b + 1, "VOI random_state =", str(b*5))
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3.0, random_state=b*5)
    print("train:", len(X_train), "test:", len(X_test))

    # TREE
    cayquyetdinh = DecisionTreeClassifier(criterion="entropy", random_state=max_random_state, max_depth=max_max_depth, min_samples_leaf=test_min_samples_leaf)
    cayquyetdinh.fit(X_train, y_train)  # huan luyen
    dudoan_tree = cayquyetdinh.predict(X_test)  # du doan
    ptr1 = accuracy_score(y_test, dudoan_tree)*100
    # BAYES
    # 1. xay dung mo hinh dua tren phan phoi xac suat tuan theo Gaussian
    model = GaussianNB()
    model.fit(X_train, y_train)

    # 2. du doan
    y_test
    dudoan_bayes = model.predict(X_test)
    ptr2 = accuracy_score(y_test, dudoan_bayes)*100

    # KNN
    # 1. xay dung mo hinh k lang gieng knn voi 3 lang gieng
    Mohinh_KNN = KNeighborsClassifier(n_neighbors=3)
    Mohinh_KNN.fit(X_train, y_train)

    # 2. du doan
    dudoan_knn = Mohinh_KNN.predict(X_test)

    # 3. tinh do chinh xac tong the
    ptr3 = accuracy_score(y_test, dudoan_knn)*100

    # 4. do chinh xac tong the sau 10 lan lap
    sum_knn += ptr3
    sum_tree += ptr1
    sum_bayes += ptr2

    print("\nMa tran nham lan tree lan lap thu ", b + 1, "la\n", confusion_matrix(y_test, dudoan_tree, labels=['CYT','NUC','MIT','ME3','ME2','ME1','EXC','VAC','POX','ERL']))
    print("\nBao cao bai toan phan loai:\n", classification_report(y_test, dudoan_tree))
    print("do chinh xac tong the tree:", round(ptr1, 4))
    print("do chinh xac tong the bayes:", round(ptr2, 4))
    print("do chinh xac tong the knn:", round(ptr3, 4))
    print("\n-------------------------------------------------------\n")

print("do chinh xac tong the trung binh cua tree sau 10 lan lap la:", round(sum_tree/10, 4))
print("do chinh xac tong the trung binh cua bayes sau 10 lan lap la:", round(sum_bayes/10, 4))
print("do chinh xac tong the trung binh cua knn sau 10 lan lap la:", round(sum_knn/10, 4))

# warnings.filterwarnings('always')
warnings.filterwarnings('ignore',category=DeprecationWarning)